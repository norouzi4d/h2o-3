import org.apache.tools.ant.taskdefs.condition.Os

description = "H2O Python Package"

String pythonexe = "python"
String pipexe = "pip"
if (System.env.VIRTUAL_ENV) {
    pythonexe = "${System.env.VIRTUAL_ENV}/bin/python".toString()
    pipexe = "${System.env.VIRTUAL_ENV}/bin/pip".toString()
}

dependencies {
    compile project(":h2o-assemblies:main")
}

def buildVersion = new H2OBuildVersion(rootDir, version)

ext {
    PROJECT_VERSION = buildVersion.getProjectVersion()
}


task makeOutputDir(type: Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine getOsSpecificCommandLine(['if not exist "build\\tmp" mkdir', 'build\\tmp'])
    } else {
        commandLine getOsSpecificCommandLine(['mkdir', '-p', 'build/tmp'])
    }
}


task setProjectVersion {
    doLast {
        File INIT = file("${getProjectDir()}/h2o/__init__.py")
        println "    INIT.path =" + INIT.path
        def txt = INIT.text
        txt = txt.replaceAll("SUBST_PROJECT_VERSION", PROJECT_VERSION)
                .replaceAll("SUBST_PROJECT_BUILDINFO", buildVersion.toString())
        INIT.write(txt)
    }
}

task resetProjectVersion {
    doLast {
        File INIT = file("${getProjectDir()}/h2o/__init__.py")
        println "    INIT.path = " + INIT.path
        def txt = INIT.text
        txt = txt.replaceAll(PROJECT_VERSION, "SUBST_PROJECT_VERSION")
                .replaceAll("__buildinfo__ = .*", "__buildinfo__ = \"SUBST_PROJECT_BUILDINFO\"")
        INIT.write(txt)
    }
}

task verifyDependencies(type: Exec) {
    commandLine getOsSpecificCommandLine([
            pythonexe, "scripts/verify_requirements.py", "--metayaml", "conda/h2o/meta.yaml"
    ])
}

task buildDist(type: Exec, dependsOn: [verifyDependencies, setProjectVersion, makeOutputDir]) {
    doFirst {
        standardOutput = new FileOutputStream("build/tmp/h2o-py_buildDist.out")
    }
    commandLine getOsSpecificCommandLine([pythonexe, "setup.py", "bdist_wheel"])
}

def testsPath = file("./tests")
task smokeTest(type: Exec) {
    dependsOn build
    workingDir testsPath
	List<String> args = [pythonexe, '../../scripts/run.py', '--wipeall', '--testsize', 's']
    if (project.hasProperty("jacocoCoverage")) {
        args << '--jacoco'
    }
    commandLine args
}


//
// Cleanup tasks
//

task cleanUpSmokeTest(type: Delete) {
    delete file("${getProjectDir()}/results")
}

task cleanCoverageData(type: Delete) {
    delete file("${testsPath}/results/jacoco")
}

task cleaner(type: Delete) {
    delete file("${getProjectDir()}/dist")
    delete file("${getProjectDir()}/h2o.egg-info")
    delete file("${getProjectDir()}/build")
    delete fileTree(dir: "$projectDir/h2o", include: '**/*.pyc')
}

//
// Define the dependencies
//
clean.dependsOn cleaner, cleanUpSmokeTest
resetProjectVersion.dependsOn buildDist
task build_python(dependsOn: resetProjectVersion)
build.dependsOn build_python
